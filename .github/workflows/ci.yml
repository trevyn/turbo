name: ci

on:
  push:
  pull_request:
  schedule: [cron: '40 1 * * *']

env:
  CARGO_TERM_COLOR: always

jobs:
  assign:
    name: assign build_id
    runs-on: ubuntu-latest
    
    steps:
      - run: wget https://github.com/trevyn/animal-time/releases/latest/download/animal-time
      - run: chmod +x animal-time
      - run: ./animal-time > build_id
      - run: cat build_id

      - uses: actions/upload-artifact@v3
        with:
          name: build_id
          path: build_id

  checklinks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: trevyn/lychee-action@v1
        id: lychee
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ./**/*.* --verbose --no-progress --exclude-all-private --base="http://127.0.0.1" --headers="accept=text/html" --scheme=http --scheme=https

      # - name: Fail if there were link-check errors
      #   run: exit ${{ steps.lychee.outputs.exit_code }}

  test:
    needs: [assign]
    name: test rust ${{ matrix.rust }} ${{ matrix.os }} 
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [nightly-2022-03-23]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: rm rust-toolchain.toml

      - run: touch -d @0$(git log --pretty=%at -n1 migrations.toml) migrations.toml
      # - run: touch -d @0$(git log --pretty=%at -n1 build.rs) build.rs

      - uses: actions/download-artifact@v3
        with:
          name: build_id

      - run: cat build_id

      - run: echo "BUILD_ID=$(cat build_id)" >> $GITHUB_ENV
      - run: echo "BUILD_ADJECTIVE=$(cat build_id | cut -d- -f1)" >> $GITHUB_ENV

      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
          targets: wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ env.BUILD_ADJECTIVE }}-3

      - run: |
          wget --no-verbose https://github.com/rustwasm/wasm-bindgen/releases/download/0.2.79/wasm-bindgen-0.2.79-x86_64-unknown-linux-musl.tar.gz
          tar xvf wasm-bindgen-0.2.79-x86_64-unknown-linux-musl.tar.gz
          wget --no-verbose https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz
          tar xvf binaryen-version_105-x86_64-linux.tar.gz

      - run: npm install
      - run: npx audit-ci --low
      - run: CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build --lib --release --target wasm32-unknown-unknown
      - run: wasm-bindgen-0.2.79-x86_64-unknown-linux-musl/wasm-bindgen --out-dir src-frontend/turbocharger_generated --out-name index --target web target/wasm32-unknown-unknown/release/turbocharger_generated.wasm
      - run: binaryen-version_105/bin/wasm-opt src-frontend/turbocharger_generated/index_bg.wasm -o src-frontend/turbocharger_generated/index_bg.wasm -Oz
      - run: npx vite build
      - run: rm -rf src-frontend/dist/assets
      - run: npx svelte-check
      - run: RUSTFLAGS="-Ctarget-cpu=nehalem"  CARGO_LOG=cargo::core::compiler::fingerprint=info cargo build --bin turbo --release --target x86_64-unknown-linux-gnu
      - run: cargo tree --target=x86_64-unknown-linux-gnu
      - run: cargo tree --target=wasm32-unknown-unknown
      - run: npm list --depth=99
      - run: |
          target/x86_64-unknown-linux-gnu/release/turbo &
          sleep 1
          cd src-frontend
          npx web-test-runner "**/*.test.{svelte,js,ts}" --node-resolve

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.rust == 'nightly-2022-03-23' }}
        with:
          name: ${{ matrix.os }}-${{ matrix.rust }}
          path: |
            target/x86_64-unknown-linux-gnu/release/*
            Cargo.lock
            package-lock.json
            !target/x86_64-unknown-linux-gnu/release/.fingerprint/*
            !target/x86_64-unknown-linux-gnu/release/build/*
            !target/x86_64-unknown-linux-gnu/release/deps/*
            !target/x86_64-unknown-linux-gnu/release/examples/*
            !target/x86_64-unknown-linux-gnu/release/incremental/*
            !target/x86_64-unknown-linux-gnu/release/*.d
            !target/x86_64-unknown-linux-gnu/release/*.rlib
            !target/x86_64-unknown-linux-gnu/release/*.dylib
            !target/x86_64-unknown-linux-gnu/release/*.so

  release:
    needs: [assign, checklinks, test]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/download-artifact@v3

      - run: cat build_id/build_id

      - run: echo "BUILD_ID=$(cat build_id/build_id)" >> $GITHUB_ENV

      # - run: mv macos-latest-stable/$(basename macos-latest-stable/*) $(basename macos-latest-stable/*)-mac

      - run: |
          mv ubuntu-latest-nightly-2022-03-23/Cargo.lock Cargo.lock
          mv ubuntu-latest-nightly-2022-03-23/package-lock.json package-lock.json
          mv ubuntu-latest-nightly-2022-03-23/target/x86_64-unknown-linux-gnu/release/$(basename ubuntu-latest-nightly-2022-03-23/target/x86_64-unknown-linux-gnu/release/*) $(basename ubuntu-latest-nightly-2022-03-23/target/x86_64-unknown-linux-gnu/release/*)-linux

      - id: create_release
        uses: trevyn/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_ID }}
          target_commitish: ${{ github.sha }}
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            turbo-linux
            Cargo.lock
            package-lock.json
